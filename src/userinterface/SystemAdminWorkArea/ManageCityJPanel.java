/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Network.CityNetwork;
import Business.Network.CountryNetwork;
import Business.Network.StateNetwork;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class ManageCityJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCityJPanel
     */
    private JPanel container;
    private EcoSystem system;
   
    public ManageCityJPanel(JPanel container, EcoSystem system) {
        initComponents();
        this.container = container;
        this.system = system;
        
        populateCityTable();
        populateCountryComboBox();
       
    }
    
    private void populateCountryComboBox() {
        comboCountry.removeAllItems();
        for(CountryNetwork countryNetwork:system.getCountryNetworkDirectory().getCountryNetworkList()){
            comboCountry.addItem(countryNetwork);
        }
    }
    private void populateStateComboBox(CountryNetwork countryNetwork) {
        comboState.removeAllItems();
     
       for(StateNetwork stateNetwork:countryNetwork.getStateNetworkDirectory().getStateNetworkList()){
           comboState.addItem(stateNetwork);
       }
    
}
    
    private void populateCityTable(){
        
         DefaultTableModel dtm = (DefaultTableModel) tblCity.getModel();
         dtm.setRowCount(0);
        for(CountryNetwork countryNetwork:system.getCountryNetworkDirectory().getCountryNetworkList()){
            for(StateNetwork stateNetwork : countryNetwork.getStateNetworkDirectory().getStateNetworkList()){
                for(CityNetwork cityNetwork:stateNetwork.getCityNetworkDirectory().getCityNetworkList()){
                System.out.println(countryNetwork);
                System.out.println(stateNetwork);
               
                Object[] row = new Object[3];
                row[0]=countryNetwork.getName();
                row[1]=stateNetwork.getName();
                row[2]=cityNetwork.getName();
                dtm.addRow(row);
               }
            } 
        }
    }

    private  void populateCountryTable(){
         DefaultTableModel dtm = (DefaultTableModel) tblCity.getModel();
       dtm.setRowCount(0);

        for(CountryNetwork countryNetwork:system.getCountryNetworkDirectory().getCountryNetworkList()){

            if(countryNetwork == comboCountry.getSelectedItem()){
            
            for(StateNetwork stateNetwork : countryNetwork.getStateNetworkDirectory().getStateNetworkList()){
               
                for(CityNetwork cityNetwork : stateNetwork.getCityNetworkDirectory().getCityNetworkList()) {
                       
                        Object[] row = new Object[3];
                        row[0]=countryNetwork.getName();
                        row[1]=stateNetwork.getName();
                        row[2]=cityNetwork;
                        dtm.addRow(row);
                    
                }
            }
            }
        }
        
    }
    
    private  void populateStateTable(){
         DefaultTableModel dtm = (DefaultTableModel) tblCity.getModel();
       dtm.setRowCount(0);

        for(CountryNetwork countryNetwork:system.getCountryNetworkDirectory().getCountryNetworkList()){

            if(countryNetwork == comboCountry.getSelectedItem()){
            
            for(StateNetwork stateNetwork : countryNetwork.getStateNetworkDirectory().getStateNetworkList()){
               
                if(stateNetwork == comboState.getSelectedItem()){
                for(CityNetwork cityNetwork : stateNetwork.getCityNetworkDirectory().getCityNetworkList()) {                       
                        Object[] row = new Object[3];
                        row[0]=countryNetwork.getName();
                        row[1]=stateNetwork.getName();
                        row[2]=cityNetwork;                        
                        dtm.addRow(row);
                }
                }
            }
            }
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCity = new javax.swing.JTable();
        txtCity = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboCountry = new javax.swing.JComboBox();
        comboState = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblCity.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tblCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Country", "State", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCity.setPreferredSize(new java.awt.Dimension(300, 400));
        jScrollPane1.setViewportView(tblCity);
        if (tblCity.getColumnModel().getColumnCount() > 0) {
            tblCity.getColumnModel().getColumn(0).setResizable(false);
            tblCity.getColumnModel().getColumn(1).setResizable(false);
            tblCity.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 404, 91));

        txtCity.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        add(txtCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 320, 161, -1));

        btnSubmit.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 370, -1, -1));

        btnBack.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 620, -1, -1));

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel1.setText("Country:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 240, -1, -1));

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel2.setText("State:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, -1, -1));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel3.setText("City:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 320, -1, -1));

        comboCountry.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        comboCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCountryActionPerformed(evt);
            }
        });
        add(comboCountry, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 160, -1));

        comboState.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        comboState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboStateActionPerformed(evt);
            }
        });
        add(comboState, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, 160, -1));

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel4.setText("MANAGE CITIES");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 50, 230, 30));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/background2.png"))); // NOI18N
        jLabel5.setText("jLabel5");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 700));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();

        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        CountryNetwork countryNetwork = (CountryNetwork) comboCountry.getSelectedItem();
        StateNetwork stateNetwork = (StateNetwork) comboState.getSelectedItem();
        
        String city = txtCity.getText();
        if((city != null)&&!(city.isEmpty()) && (stateNetwork != null))
        {
            Pattern pattern = Pattern.compile("[^A-Za-z]");
            Matcher m = pattern.matcher(city);
            boolean boo = m.find();
            if(boo == true || city == null) {
                JOptionPane.showMessageDialog(null,"Enter Valid Details");
            }
            else{  
                
                CityNetwork cityNetwork = stateNetwork.getCityNetworkDirectory().createAndAddCityNetwork(city);
                populateCityTable();
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"Enter Valid Details");
        }
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void comboCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCountryActionPerformed
        // TODO add your handling code here:
        CountryNetwork countryNetwork = (CountryNetwork) comboCountry.getSelectedItem();
        if(countryNetwork != null){
            populateStateComboBox(countryNetwork);
            populateCountryTable();
        }
    }//GEN-LAST:event_comboCountryActionPerformed

    private void comboStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboStateActionPerformed
        // TODO add your handling code here:
             StateNetwork stateNetwork = (StateNetwork) comboState.getSelectedItem();
        if(stateNetwork != null){
            populateStateTable();
        }
    }//GEN-LAST:event_comboStateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox comboCountry;
    private javax.swing.JComboBox comboState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblCity;
    private javax.swing.JTextField txtCity;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EnvironmentGettingAdminWorkArea;

import userinterface.ProviderInventoryAdminWorkArea.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Inventory.Inventory;
import Business.Network.CityNetwork;
import Business.Network.CountryNetwork;
import Business.Network.StateNetwork;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import Business.Organization.RenderOrganization;
import Business.Organization.RentalOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.InventoryWorkRequest;
import Business.WorkQueue.RenderWorkRequest;
import Business.WorkQueue.RentalWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class EnvironmentRequestInventoryJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestInventoryJPanel
     */
    private JPanel container;
    private UserAccount account;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem business;
    public EnvironmentRequestInventoryJPanel(JPanel container, Organization organization, UserAccount account, EcoSystem business, Enterprise enterprise) {
         initComponents();
         this.container = container;
         this.account = account;
         this.organization = organization;
         this.enterprise = enterprise;
         this.business = business;
         populateProviderCombo();
         populateTable();
    }

    public void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblRequestInventory.getModel();
        dtm.setRowCount(0);
        for(WorkRequest request: account.getWorkqueue().getWorkRequestList()){
            Object[] row1 = new Object[5];
            row1[0]=request.getId();
            row1[1]=request.getProvider();
            row1[2]=request.getProduct();
            row1[3]=request.getStatus();
            row1[4]=request.getQuantity();
            dtm.addRow(row1);
        }
    }
    
    private  void populateProviderCombo(){
        comboProvider.removeAllItems();
        for(CountryNetwork countryNetwork:business.getCountryNetworkDirectory().getCountryNetworkList()){
            for(StateNetwork stateNetwork:countryNetwork.getStateNetworkDirectory().getStateNetworkList()){
                for(CityNetwork cityNetwork:stateNetwork.getCityNetworkDirectory().getCityNetworkList()){
                    for(Enterprise enterprise1: cityNetwork.getEnterpriseDirectory().getEnterpriseList()){
                        if(enterprise1.getEnterpriseType().getValue().equals("Provider")){
                            comboProvider.addItem(enterprise1);
                        }
                    }
                }
            }
        }
    }
    private void populateProductCombo(Enterprise enterprise){
        comboProduct.removeAllItems();       
        System.out.println("aaaaaa");
        
        for(Organization org:enterprise.getOrganizationDirectory().getOrganizationList()){
            System.out.println("11"+org);
            String name = String.valueOf(org);
            System.out.println(name.equals("Inventory Organization"));
            if(name.equals("Inventory Organization")){
                System.out.println("qreeeesdd");
                System.out.println("32132"+org.getInventoryDirectory().getInventoryList());
            for(Inventory inventory:org.getInventoryDirectory().getInventoryList()){
                comboProduct.addItem(inventory.getProductName());
                System.out.println("HIIIII");
                System.out.println("123"+inventory);
            }
            }
        }
   
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboProvider = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        comboProduct = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequestInventory = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(600, 750));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setText("Request Inventory");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, -1, -1));

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel2.setText("Provider:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 110, -1, -1));

        comboProvider.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        comboProvider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProviderActionPerformed(evt);
            }
        });
        add(comboProvider, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 150, -1));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel3.setText("Product:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 160, -1, -1));

        comboProduct.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        add(comboProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 160, 150, -1));

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 210, -1, -1));

        txtQuantity.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 210, 150, -1));

        btnSubmit.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 260, -1, -1));

        btnBack.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 640, -1, -1));

        tblRequestInventory.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        tblRequestInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Provider", "Product", "Status", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRequestInventory);
        if (tblRequestInventory.getColumnModel().getColumnCount() > 0) {
            tblRequestInventory.getColumnModel().getColumn(0).setResizable(false);
            tblRequestInventory.getColumnModel().getColumn(1).setResizable(false);
            tblRequestInventory.getColumnModel().getColumn(2).setResizable(false);
            tblRequestInventory.getColumnModel().getColumn(3).setResizable(false);
            tblRequestInventory.getColumnModel().getColumn(4).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 820, 230));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/background2.png"))); // NOI18N
        jLabel4.setText("jLabel4");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 700));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboProviderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProviderActionPerformed
        // TODO add your handling code here:
        Enterprise enterprise1 = (Enterprise) comboProvider.getSelectedItem();
        if(enterprise1 != null){
            populateProductCombo(enterprise1);
          //  populateCountryTable();
        }
    }//GEN-LAST:event_comboProviderActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        String quantity1 = txtQuantity.getText();
        String product1 = String.valueOf(comboProduct.getSelectedItem());
        //int quantity = Integer.parseInt(txtQuantity.getText());
        Enterprise provider = (Enterprise)comboProvider.getSelectedItem();
        if((quantity1!= null)&&!(quantity1.isEmpty())&&(product1!=null)&&!(product1.isEmpty()))
        {
            Pattern pattern = Pattern.compile("[^0-9]");
            Matcher m = pattern.matcher(quantity1);
            boolean boo = m.find();
            if(boo == true || txtQuantity.getText() == null) {
                JOptionPane.showMessageDialog(null,"Enter Valid Details");
            }
            else{  
                int quantity = Integer.parseInt(txtQuantity.getText());
                InventoryWorkRequest request = new InventoryWorkRequest();
                // request.setId(i);
                request.setProvider(String.valueOf(comboProvider.getSelectedItem()));
                request.setSender(account);
                request.setStatus("Sent");
                request.setProduct(String.valueOf(comboProduct.getSelectedItem()));
                request.setQuantity(quantity);

                Organization org = null;
                for(Organization organization1:provider.getOrganizationDirectory().getOrganizationList()){
                    System.out.println("organization"+organization1);
                    System.out.println("1234422"+(organization1 instanceof InventoryOrganization));
                    if(organization1 instanceof InventoryOrganization){
                        org =organization1;
                        break;
                    }
                }
                if(org != null){
                    organization.getWorkQueue().getWorkRequestList().add(request);
                    org.getWorkQueue().getWorkRequestList().add(request);
                    account.getWorkqueue().getWorkRequestList().add(request);
                }
                populateTable();
            }
        }
        else {
            JOptionPane.showMessageDialog(null,"Enter Valid Details");
        }
    }//GEN-LAST:event_btnSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox comboProduct;
    private javax.swing.JComboBox comboProvider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRequestInventory;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
